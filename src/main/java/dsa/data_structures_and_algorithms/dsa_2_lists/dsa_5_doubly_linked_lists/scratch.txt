Linked List (Double Linked List)

- Each item in the list has next and previous fields
- The list has a head and a tail.


**INSERT FROM HEAD**
- Create new node "Bill".
- Assign "Jane" to Bill's next field.
- Assign whatever Jane is pointing to as previous to Bill's previous field.
- Assign "Bill" to Jane's previous field.
- Assign head to "Bill".
- O(1) time complexity (Constant time)

---------------------------------------------------------------------------------------------------
**INSERT FROM TAIL**
- Create new node "Bill".
- Assign tail's next field to Bill's next field.
- Assign tail to Bill's previous field.
- Assign tail's next field to "Bill".
- Assign tail to "Bill".
- O(1) time complexity (Constant time)

---------------------------------------------------------------------------------------------------
**DELETE FROM HEAD**
- Assign "Jane" to "removedNode".
- Assign John's previous field to Jane's previous field.
- Assign head to Jane's next field.
- 0(1) time complexity (Constant time)

---------------------------------------------------------------------------------------------------
**DELETE FROM TAIL**
- Assign "Bill" to "removedNode".
- Assign Mike's next field to Bill's next field.
- Assign tail to Bill's previous field.
- Return "removedNode" from the method.
- O(1) time complexity (Constant time)

---------------------------------------------------------------------------------------------------
To insert a node A between nodes B and C:
- Assign A's next field to B's next field.
- Assign A's previous field to C's previous field.
- Assign B's next field to A
- Assign C's previous field to A
- O(1) time complexity BUT we have to find the insertion position first,
  so this is actually O(n).

---------------------------------------------------------------------------------------------------
To remove node A from between B and C:
- Assign A to "removedNode".
- Assign C's previous field to A's previous field.
- Assign B's next field to A's next field.
- Return A from the method.
- O(1) time complexity BUT we have to find A first, so this is actually O(n).

