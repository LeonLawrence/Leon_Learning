Merge Sort

- Divide and conquer algorithm.
- Recursive algorithm.
- Two phases: Spitting and Merging.
- Splitting phrase leads to faster sorting during the Merging phase.
- Splitting is logical. We don't create new arrays.

----------------------------------------------------------
Merge Sort - Splitting Phase (preparation)

- Start with an unsorted array.
- Divide the array into two arrays, which are unsorted.
  The first array is the left array, and the second array is
  the right array.
- Split the left and right arrays into two arrays each.
- Keep splitting until all the arrays have only one element each - these arrays are sorted.

----------------------------------------------------------
Merge Sort - Merging Phase (sorting)

- Merge every left / right pair of sibling arrays into a sorted array.
- After the first merge, we'll have a bunch of 2-elements sorted arrays.
- Then merge those sorted arrays (left / right siblings) to
  end up with a bunch of 4-elements sorted arrays.
- Repeat until you have a single sorted array.
- Not in-place. Uses temporary arrays.

----------------------------------------------------------
Merging Process

- We repeat this process until all elements in the two arrays
  have been processed.
- At this point, the temporary array contains the merged
  values in sorted order.
- We then copy this temporary array back to the original input
  array, at the correct positions.
- If the left array is at position x to y, and the right array is at
  positions x to y, and the right array is at positions y + 1 to z, then after the copy, positions x to z will
  be sorted in the original array.

----------------------------------------------------------
Merge Sort

- NOT an in-place algorithm.
- O(nlogn) - base 2. We're repeatedly dividing the array in half during the splitting phase.
- Stable algorithm.